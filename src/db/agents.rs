//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "agents")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub agent_type: String,
    pub binary: String,
    pub topic: String,
    pub host: String,
    pub admin_state_up: i8,
    pub created_at: DateTime,
    pub started_at: DateTime,
    pub heartbeat_timestamp: DateTime,
    pub description: Option<String>,
    pub configurations: String,
    pub load: i32,
    pub availability_zone: Option<String>,
    pub resource_versions: Option<String>,
    pub resources_synced: Option<i8>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::bgp_speaker_dragent_bindings::Entity")]
    BgpSpeakerDragentBindings,
    #[sea_orm(has_many = "super::dvr_fip_gateway_port_network::Entity")]
    DvrFipGatewayPortNetwork,
    #[sea_orm(has_many = "super::ha_router_agent_port_bindings::Entity")]
    HaRouterAgentPortBindings,
    #[sea_orm(has_many = "super::networkdhcpagentbindings::Entity")]
    Networkdhcpagentbindings,
    #[sea_orm(has_many = "super::poolloadbalanceragentbindings::Entity")]
    Poolloadbalanceragentbindings,
    #[sea_orm(has_many = "super::routerl3agentbindings::Entity")]
    Routerl3agentbindings,
}

impl Related<super::bgp_speaker_dragent_bindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BgpSpeakerDragentBindings.def()
    }
}

impl Related<super::dvr_fip_gateway_port_network::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DvrFipGatewayPortNetwork.def()
    }
}

impl Related<super::ha_router_agent_port_bindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HaRouterAgentPortBindings.def()
    }
}

impl Related<super::networkdhcpagentbindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Networkdhcpagentbindings.def()
    }
}

impl Related<super::poolloadbalanceragentbindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Poolloadbalanceragentbindings.def()
    }
}

impl Related<super::routerl3agentbindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Routerl3agentbindings.def()
    }
}

impl Related<super::routers::Entity> for Entity {
    fn to() -> RelationDef {
        super::routerl3agentbindings::Relation::Routers.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::routerl3agentbindings::Relation::Agents.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
