//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "bgp_speaker_peer_bindings")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub bgp_speaker_id: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub bgp_peer_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::bgp_peers::Entity",
        from = "Column::BgpPeerId",
        to = "super::bgp_peers::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    BgpPeers,
    #[sea_orm(
        belongs_to = "super::bgp_speakers::Entity",
        from = "Column::BgpSpeakerId",
        to = "super::bgp_speakers::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    BgpSpeakers,
}

impl Related<super::bgp_peers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BgpPeers.def()
    }
}

impl Related<super::bgp_speakers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BgpSpeakers.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
