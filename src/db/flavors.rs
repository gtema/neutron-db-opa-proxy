//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "flavors")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: Option<String>,
    pub description: Option<String>,
    pub enabled: i8,
    pub service_type: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::flavorserviceprofilebindings::Entity")]
    Flavorserviceprofilebindings,
    #[sea_orm(has_many = "super::routers::Entity")]
    Routers,
}

impl Related<super::flavorserviceprofilebindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Flavorserviceprofilebindings.def()
    }
}

impl Related<super::routers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Routers.def()
    }
}

impl Related<super::serviceprofiles::Entity> for Entity {
    fn to() -> RelationDef {
        super::flavorserviceprofilebindings::Relation::Serviceprofiles.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::flavorserviceprofilebindings::Relation::Flavors
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
