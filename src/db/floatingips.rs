//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "floatingips")]
pub struct Model {
    pub project_id: Option<String>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub floating_ip_address: String,
    pub floating_network_id: String,
    pub floating_port_id: String,
    pub fixed_port_id: Option<String>,
    pub fixed_ip_address: Option<String>,
    pub router_id: Option<String>,
    pub last_known_router_id: Option<String>,
    pub status: Option<String>,
    #[sea_orm(unique)]
    pub standard_attr_id: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::floatingipdnses::Entity")]
    Floatingipdnses,
    #[sea_orm(has_many = "super::portforwardings::Entity")]
    Portforwardings,
    #[sea_orm(
        belongs_to = "super::ports::Entity",
        from = "Column::FixedPortId",
        to = "super::ports::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Ports2,
    #[sea_orm(
        belongs_to = "super::ports::Entity",
        from = "Column::FloatingPortId",
        to = "super::ports::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Ports1,
    #[sea_orm(has_one = "super::qos_fip_policy_bindings::Entity")]
    QosFipPolicyBindings,
    #[sea_orm(
        belongs_to = "super::routers::Entity",
        from = "Column::RouterId",
        to = "super::routers::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Routers,
    #[sea_orm(
        belongs_to = "super::standardattributes::Entity",
        from = "Column::StandardAttrId",
        to = "super::standardattributes::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Standardattributes,
}

impl Related<super::floatingipdnses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Floatingipdnses.def()
    }
}

impl Related<super::portforwardings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Portforwardings.def()
    }
}

impl Related<super::qos_fip_policy_bindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QosFipPolicyBindings.def()
    }
}

impl Related<super::routers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Routers.def()
    }
}

impl Related<super::standardattributes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Standardattributes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
