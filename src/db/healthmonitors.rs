//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use super::sea_orm_active_enums::Type;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "healthmonitors")]
pub struct Model {
    pub tenant_id: Option<String>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub r#type: Type,
    pub delay: i32,
    pub timeout: i32,
    pub max_retries: i32,
    pub http_method: Option<String>,
    pub url_path: Option<String>,
    pub expected_codes: Option<String>,
    pub admin_state_up: i8,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::poolmonitorassociations::Entity")]
    Poolmonitorassociations,
}

impl Related<super::poolmonitorassociations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Poolmonitorassociations.def()
    }
}

impl Related<super::pools::Entity> for Entity {
    fn to() -> RelationDef {
        super::poolmonitorassociations::Relation::Pools.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::poolmonitorassociations::Relation::Healthmonitors
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
