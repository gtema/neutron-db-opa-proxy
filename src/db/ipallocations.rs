//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "ipallocations")]
pub struct Model {
    pub port_id: Option<String>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub ip_address: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub subnet_id: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub network_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::networks::Entity",
        from = "Column::NetworkId",
        to = "super::networks::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Networks,
    #[sea_orm(
        belongs_to = "super::ports::Entity",
        from = "Column::PortId",
        to = "super::ports::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Ports,
    #[sea_orm(
        belongs_to = "super::subnets::Entity",
        from = "Column::SubnetId",
        to = "super::subnets::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Subnets,
}

impl Related<super::networks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Networks.def()
    }
}

impl Related<super::ports::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ports.def()
    }
}

impl Related<super::subnets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subnets.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
