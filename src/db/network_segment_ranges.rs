//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use super::sea_orm_active_enums::NetworkType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "network_segment_ranges")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: Option<String>,
    pub default: i8,
    pub shared: i8,
    pub project_id: Option<String>,
    pub network_type: NetworkType,
    pub physical_network: Option<String>,
    pub minimum: Option<i32>,
    pub maximum: Option<i32>,
    #[sea_orm(unique)]
    pub standard_attr_id: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::standardattributes::Entity",
        from = "Column::StandardAttrId",
        to = "super::standardattributes::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Standardattributes,
}

impl Related<super::standardattributes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Standardattributes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
