//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "networks")]
pub struct Model {
    pub project_id: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: Option<String>,
    pub status: Option<String>,
    pub admin_state_up: Option<i8>,
    //pub vlan_transparent: Option<i8>,
    #[sea_orm(unique)]
    pub standard_attr_id: i64,
    //pub availability_zone_hints: Option<String>,
    //pub mtu: i32,
    //pub qinq: Option<i8>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::auto_allocated_topologies::Entity")]
    AutoAllocatedTopologies,
    #[sea_orm(has_many = "super::bgp_speaker_network_bindings::Entity")]
    BgpSpeakerNetworkBindings,
    #[sea_orm(has_many = "super::dvr_fip_gateway_port_network::Entity")]
    DvrFipGatewayPortNetwork,
    #[sea_orm(has_one = "super::externalnetworks::Entity")]
    Externalnetworks,
    #[sea_orm(has_many = "super::ha_router_networks::Entity")]
    HaRouterNetworks,
    #[sea_orm(has_many = "super::ha_router_vrid_allocations::Entity")]
    HaRouterVridAllocations,
    #[sea_orm(has_many = "super::ipallocations::Entity")]
    Ipallocations,
    #[sea_orm(has_one = "super::network_subnet_lock::Entity")]
    NetworkSubnetLock,
    #[sea_orm(has_many = "super::networkdhcpagentbindings::Entity")]
    Networkdhcpagentbindings,
    #[sea_orm(has_one = "super::networkdnsdomains::Entity")]
    Networkdnsdomains,
    #[sea_orm(has_many = "super::networkrbacs::Entity")]
    Networkrbacs,
    #[sea_orm(has_one = "super::networksecuritybindings::Entity")]
    Networksecuritybindings,
    #[sea_orm(has_many = "super::networksegments::Entity")]
    Networksegments,
    #[sea_orm(has_many = "super::ports::Entity")]
    Ports,
    #[sea_orm(has_one = "super::qos_network_policy_bindings::Entity")]
    QosNetworkPolicyBindings,
    #[sea_orm(
        belongs_to = "super::standardattributes::Entity",
        from = "Column::StandardAttrId",
        to = "super::standardattributes::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Standardattributes,
    #[sea_orm(has_many = "super::subnets::Entity")]
    Subnets,
}

impl Related<super::auto_allocated_topologies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AutoAllocatedTopologies.def()
    }
}

impl Related<super::bgp_speaker_network_bindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BgpSpeakerNetworkBindings.def()
    }
}

impl Related<super::dvr_fip_gateway_port_network::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DvrFipGatewayPortNetwork.def()
    }
}

impl Related<super::externalnetworks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Externalnetworks.def()
    }
}

impl Related<super::ha_router_networks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HaRouterNetworks.def()
    }
}

impl Related<super::ha_router_vrid_allocations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HaRouterVridAllocations.def()
    }
}

impl Related<super::ipallocations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ipallocations.def()
    }
}

impl Related<super::network_subnet_lock::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NetworkSubnetLock.def()
    }
}

impl Related<super::networkdhcpagentbindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Networkdhcpagentbindings.def()
    }
}

impl Related<super::networkdnsdomains::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Networkdnsdomains.def()
    }
}

impl Related<super::networkrbacs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Networkrbacs.def()
    }
}

impl Related<super::networksecuritybindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Networksecuritybindings.def()
    }
}

impl Related<super::networksegments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Networksegments.def()
    }
}

impl Related<super::ports::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ports.def()
    }
}

impl Related<super::qos_network_policy_bindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QosNetworkPolicyBindings.def()
    }
}

impl Related<super::standardattributes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Standardattributes.def()
    }
}

impl Related<super::subnets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subnets.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
