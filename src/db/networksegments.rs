//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "networksegments")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub network_id: String,
    pub network_type: String,
    pub physical_network: Option<String>,
    pub segmentation_id: Option<i32>,
    pub is_dynamic: i8,
    pub segment_index: i32,
    #[sea_orm(unique)]
    pub standard_attr_id: i64,
    pub name: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::ml2_port_binding_levels::Entity")]
    Ml2PortBindingLevels,
    #[sea_orm(
        belongs_to = "super::networks::Entity",
        from = "Column::NetworkId",
        to = "super::networks::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Networks,
    #[sea_orm(has_many = "super::segmenthostmappings::Entity")]
    Segmenthostmappings,
    #[sea_orm(
        belongs_to = "super::standardattributes::Entity",
        from = "Column::StandardAttrId",
        to = "super::standardattributes::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Standardattributes,
    #[sea_orm(has_many = "super::subnets::Entity")]
    Subnets,
}

impl Related<super::ml2_port_binding_levels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ml2PortBindingLevels.def()
    }
}

impl Related<super::networks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Networks.def()
    }
}

impl Related<super::segmenthostmappings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Segmenthostmappings.def()
    }
}

impl Related<super::standardattributes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Standardattributes.def()
    }
}

impl Related<super::subnets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subnets.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
