//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use super::sea_orm_active_enums::LbMethod;
use super::sea_orm_active_enums::Protocol;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "pools")]
pub struct Model {
    pub tenant_id: Option<String>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub status: String,
    pub status_description: Option<String>,
    pub vip_id: Option<String>,
    pub name: Option<String>,
    pub description: Option<String>,
    pub subnet_id: String,
    pub protocol: Protocol,
    pub lb_method: LbMethod,
    pub admin_state_up: i8,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::members::Entity")]
    Members,
    #[sea_orm(has_one = "super::poolloadbalanceragentbindings::Entity")]
    Poolloadbalanceragentbindings,
    #[sea_orm(has_many = "super::poolmonitorassociations::Entity")]
    Poolmonitorassociations,
    #[sea_orm(has_one = "super::poolstatisticss::Entity")]
    Poolstatisticss,
    #[sea_orm(
        belongs_to = "super::vips::Entity",
        from = "Column::VipId",
        to = "super::vips::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Vips,
}

impl Related<super::members::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Members.def()
    }
}

impl Related<super::poolloadbalanceragentbindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Poolloadbalanceragentbindings.def()
    }
}

impl Related<super::poolmonitorassociations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Poolmonitorassociations.def()
    }
}

impl Related<super::poolstatisticss::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Poolstatisticss.def()
    }
}

impl Related<super::vips::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Vips.def()
    }
}

impl Related<super::healthmonitors::Entity> for Entity {
    fn to() -> RelationDef {
        super::poolmonitorassociations::Relation::Healthmonitors.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::poolmonitorassociations::Relation::Pools.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
