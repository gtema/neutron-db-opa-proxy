//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "portforwardings")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub floatingip_id: String,
    pub internal_neutron_port_id: String,
    pub protocol: String,
    #[sea_orm(unique)]
    pub standard_attr_id: i64,
    pub internal_ip_address: String,
    pub internal_port_start: i32,
    pub internal_port_end: i32,
    pub external_port_start: i32,
    pub external_port_end: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::floatingips::Entity",
        from = "Column::FloatingipId",
        to = "super::floatingips::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Floatingips,
    #[sea_orm(
        belongs_to = "super::ports::Entity",
        from = "Column::InternalNeutronPortId",
        to = "super::ports::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Ports,
    #[sea_orm(
        belongs_to = "super::standardattributes::Entity",
        from = "Column::StandardAttrId",
        to = "super::standardattributes::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Standardattributes,
}

impl Related<super::floatingips::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Floatingips.def()
    }
}

impl Related<super::ports::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ports.def()
    }
}

impl Related<super::standardattributes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Standardattributes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
