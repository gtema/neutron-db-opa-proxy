//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "ports")]
pub struct Model {
    pub project_id: Option<String>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: Option<String>,
    pub network_id: String,
    pub mac_address: String,
    pub admin_state_up: i8,
    pub status: String,
    pub device_id: String,
    pub device_owner: String,
    #[sea_orm(unique)]
    pub standard_attr_id: i64,
    pub ip_allocation: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::allowedaddresspairs::Entity")]
    Allowedaddresspairs,
    #[sea_orm(has_many = "super::extradhcpopts::Entity")]
    Extradhcpopts,
    #[sea_orm(has_one = "super::ha_router_agent_port_bindings::Entity")]
    HaRouterAgentPortBindings,
    #[sea_orm(has_many = "super::ipallocations::Entity")]
    Ipallocations,
    #[sea_orm(has_many = "super::local_ip_associations::Entity")]
    LocalIpAssociations,
    #[sea_orm(has_many = "super::local_ips::Entity")]
    LocalIps,
    #[sea_orm(has_many = "super::ml2_distributed_port_bindings::Entity")]
    Ml2DistributedPortBindings,
    #[sea_orm(has_many = "super::ml2_port_binding_levels::Entity")]
    Ml2PortBindingLevels,
    #[sea_orm(has_many = "super::ml2_port_bindings::Entity")]
    Ml2PortBindings,
    #[sea_orm(has_many = "super::ndp_proxies::Entity")]
    NdpProxies,
    #[sea_orm(
        belongs_to = "super::networks::Entity",
        from = "Column::NetworkId",
        to = "super::networks::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Networks,
    #[sea_orm(has_one = "super::portdataplanestatuses::Entity")]
    Portdataplanestatuses,
    #[sea_orm(has_one = "super::portdeviceprofiles::Entity")]
    Portdeviceprofiles,
    #[sea_orm(has_one = "super::portdnses::Entity")]
    Portdnses,
    #[sea_orm(has_many = "super::portforwardings::Entity")]
    Portforwardings,
    #[sea_orm(has_one = "super::porthardwareoffloadtype::Entity")]
    Porthardwareoffloadtype,
    #[sea_orm(has_one = "super::porthints::Entity")]
    Porthints,
    #[sea_orm(has_one = "super::portnumaaffinitypolicies::Entity")]
    Portnumaaffinitypolicies,
    #[sea_orm(has_one = "super::portsecuritybindings::Entity")]
    Portsecuritybindings,
    #[sea_orm(has_one = "super::porttrusted::Entity")]
    Porttrusted,
    #[sea_orm(has_one = "super::portuplinkstatuspropagation::Entity")]
    Portuplinkstatuspropagation,
    #[sea_orm(has_one = "super::qos_port_policy_bindings::Entity")]
    QosPortPolicyBindings,
    #[sea_orm(has_one = "super::routerports::Entity")]
    Routerports,
    #[sea_orm(has_many = "super::routers::Entity")]
    Routers,
    #[sea_orm(has_many = "super::securitygroupportbindings::Entity")]
    Securitygroupportbindings,
    #[sea_orm(
        belongs_to = "super::standardattributes::Entity",
        from = "Column::StandardAttrId",
        to = "super::standardattributes::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Standardattributes,
    #[sea_orm(has_one = "super::subports::Entity")]
    Subports,
    #[sea_orm(has_one = "super::trunks::Entity")]
    Trunks,
    #[sea_orm(has_many = "super::vips::Entity")]
    Vips,
}

impl Related<super::allowedaddresspairs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Allowedaddresspairs.def()
    }
}

impl Related<super::extradhcpopts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Extradhcpopts.def()
    }
}

impl Related<super::ha_router_agent_port_bindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HaRouterAgentPortBindings.def()
    }
}

impl Related<super::ipallocations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ipallocations.def()
    }
}

impl Related<super::local_ip_associations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LocalIpAssociations.def()
    }
}

impl Related<super::ml2_distributed_port_bindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ml2DistributedPortBindings.def()
    }
}

impl Related<super::ml2_port_binding_levels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ml2PortBindingLevels.def()
    }
}

impl Related<super::ml2_port_bindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ml2PortBindings.def()
    }
}

impl Related<super::ndp_proxies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NdpProxies.def()
    }
}

impl Related<super::networks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Networks.def()
    }
}

impl Related<super::portdataplanestatuses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Portdataplanestatuses.def()
    }
}

impl Related<super::portdeviceprofiles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Portdeviceprofiles.def()
    }
}

impl Related<super::portdnses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Portdnses.def()
    }
}

impl Related<super::portforwardings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Portforwardings.def()
    }
}

impl Related<super::porthardwareoffloadtype::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Porthardwareoffloadtype.def()
    }
}

impl Related<super::porthints::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Porthints.def()
    }
}

impl Related<super::portnumaaffinitypolicies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Portnumaaffinitypolicies.def()
    }
}

impl Related<super::portsecuritybindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Portsecuritybindings.def()
    }
}

impl Related<super::porttrusted::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Porttrusted.def()
    }
}

impl Related<super::portuplinkstatuspropagation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Portuplinkstatuspropagation.def()
    }
}

impl Related<super::qos_port_policy_bindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QosPortPolicyBindings.def()
    }
}

impl Related<super::routerports::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Routerports.def()
    }
}

impl Related<super::securitygroupportbindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Securitygroupportbindings.def()
    }
}

impl Related<super::standardattributes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Standardattributes.def()
    }
}

impl Related<super::subports::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subports.def()
    }
}

impl Related<super::trunks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Trunks.def()
    }
}

impl Related<super::vips::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Vips.def()
    }
}

impl Related<super::local_ips::Entity> for Entity {
    fn to() -> RelationDef {
        super::local_ip_associations::Relation::LocalIps.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::local_ip_associations::Relation::Ports.def().rev())
    }
}

impl Related<super::routers::Entity> for Entity {
    fn to() -> RelationDef {
        super::routerports::Relation::Routers.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::routerports::Relation::Ports.def().rev())
    }
}

impl Related<super::securitygroups::Entity> for Entity {
    fn to() -> RelationDef {
        super::securitygroupportbindings::Relation::Securitygroups.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::securitygroupportbindings::Relation::Ports
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
