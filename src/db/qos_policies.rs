//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "qos_policies")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: Option<String>,
    pub project_id: Option<String>,
    #[sea_orm(unique)]
    pub standard_attr_id: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::qos_bandwidth_limit_rules::Entity")]
    QosBandwidthLimitRules,
    #[sea_orm(has_one = "super::qos_dscp_marking_rules::Entity")]
    QosDscpMarkingRules,
    #[sea_orm(has_many = "super::qos_fip_policy_bindings::Entity")]
    QosFipPolicyBindings,
    #[sea_orm(has_many = "super::qos_minimum_bandwidth_rules::Entity")]
    QosMinimumBandwidthRules,
    #[sea_orm(has_many = "super::qos_minimum_packet_rate_rules::Entity")]
    QosMinimumPacketRateRules,
    #[sea_orm(has_many = "super::qos_network_policy_bindings::Entity")]
    QosNetworkPolicyBindings,
    #[sea_orm(has_many = "super::qos_packet_rate_limit_rules::Entity")]
    QosPacketRateLimitRules,
    #[sea_orm(has_many = "super::qos_policies_default::Entity")]
    QosPoliciesDefault,
    #[sea_orm(has_many = "super::qos_port_policy_bindings::Entity")]
    QosPortPolicyBindings,
    #[sea_orm(has_many = "super::qos_router_gw_policy_bindings::Entity")]
    QosRouterGwPolicyBindings,
    #[sea_orm(has_many = "super::qospolicyrbacs::Entity")]
    Qospolicyrbacs,
    #[sea_orm(
        belongs_to = "super::standardattributes::Entity",
        from = "Column::StandardAttrId",
        to = "super::standardattributes::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Standardattributes,
}

impl Related<super::qos_bandwidth_limit_rules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QosBandwidthLimitRules.def()
    }
}

impl Related<super::qos_dscp_marking_rules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QosDscpMarkingRules.def()
    }
}

impl Related<super::qos_fip_policy_bindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QosFipPolicyBindings.def()
    }
}

impl Related<super::qos_minimum_bandwidth_rules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QosMinimumBandwidthRules.def()
    }
}

impl Related<super::qos_minimum_packet_rate_rules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QosMinimumPacketRateRules.def()
    }
}

impl Related<super::qos_network_policy_bindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QosNetworkPolicyBindings.def()
    }
}

impl Related<super::qos_packet_rate_limit_rules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QosPacketRateLimitRules.def()
    }
}

impl Related<super::qos_policies_default::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QosPoliciesDefault.def()
    }
}

impl Related<super::qos_port_policy_bindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QosPortPolicyBindings.def()
    }
}

impl Related<super::qos_router_gw_policy_bindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QosRouterGwPolicyBindings.def()
    }
}

impl Related<super::qospolicyrbacs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Qospolicyrbacs.def()
    }
}

impl Related<super::standardattributes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Standardattributes.def()
    }
}

impl Related<super::routers::Entity> for Entity {
    fn to() -> RelationDef {
        super::qos_router_gw_policy_bindings::Relation::Routers.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::qos_router_gw_policy_bindings::Relation::QosPolicies
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
