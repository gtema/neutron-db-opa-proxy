//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "routers")]
pub struct Model {
    pub project_id: Option<String>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: Option<String>,
    pub status: Option<String>,
    pub admin_state_up: Option<i8>,
    pub gw_port_id: Option<String>,
    pub enable_snat: i8,
    #[sea_orm(unique)]
    pub standard_attr_id: i64,
    pub flavor_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::auto_allocated_topologies::Entity")]
    AutoAllocatedTopologies,
    #[sea_orm(has_many = "super::conntrack_helpers::Entity")]
    ConntrackHelpers,
    #[sea_orm(
        belongs_to = "super::flavors::Entity",
        from = "Column::FlavorId",
        to = "super::flavors::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Flavors,
    #[sea_orm(has_many = "super::floatingips::Entity")]
    Floatingips,
    #[sea_orm(has_many = "super::ha_router_agent_port_bindings::Entity")]
    HaRouterAgentPortBindings,
    #[sea_orm(has_many = "super::ndp_proxies::Entity")]
    NdpProxies,
    #[sea_orm(
        belongs_to = "super::ports::Entity",
        from = "Column::GwPortId",
        to = "super::ports::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Ports,
    #[sea_orm(has_one = "super::qos_router_gw_policy_bindings::Entity")]
    QosRouterGwPolicyBindings,
    #[sea_orm(has_one = "super::router_extra_attributes::Entity")]
    RouterExtraAttributes,
    #[sea_orm(has_one = "super::router_ndp_proxy_state::Entity")]
    RouterNdpProxyState,
    #[sea_orm(has_many = "super::routerl3agentbindings::Entity")]
    Routerl3agentbindings,
    #[sea_orm(has_many = "super::routerports::Entity")]
    Routerports,
    #[sea_orm(has_many = "super::routerroutes::Entity")]
    Routerroutes,
    #[sea_orm(has_many = "super::routerrules::Entity")]
    Routerrules,
    #[sea_orm(
        belongs_to = "super::standardattributes::Entity",
        from = "Column::StandardAttrId",
        to = "super::standardattributes::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Standardattributes,
    #[sea_orm(has_many = "super::vpnservices::Entity")]
    Vpnservices,
}

impl Related<super::auto_allocated_topologies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AutoAllocatedTopologies.def()
    }
}

impl Related<super::conntrack_helpers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ConntrackHelpers.def()
    }
}

impl Related<super::flavors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Flavors.def()
    }
}

impl Related<super::floatingips::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Floatingips.def()
    }
}

impl Related<super::ha_router_agent_port_bindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::HaRouterAgentPortBindings.def()
    }
}

impl Related<super::ndp_proxies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NdpProxies.def()
    }
}

impl Related<super::qos_router_gw_policy_bindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QosRouterGwPolicyBindings.def()
    }
}

impl Related<super::router_extra_attributes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RouterExtraAttributes.def()
    }
}

impl Related<super::router_ndp_proxy_state::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RouterNdpProxyState.def()
    }
}

impl Related<super::routerl3agentbindings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Routerl3agentbindings.def()
    }
}

impl Related<super::routerports::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Routerports.def()
    }
}

impl Related<super::routerroutes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Routerroutes.def()
    }
}

impl Related<super::routerrules::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Routerrules.def()
    }
}

impl Related<super::standardattributes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Standardattributes.def()
    }
}

impl Related<super::vpnservices::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Vpnservices.def()
    }
}

impl Related<super::agents::Entity> for Entity {
    fn to() -> RelationDef {
        super::routerl3agentbindings::Relation::Agents.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::routerl3agentbindings::Relation::Routers.def().rev())
    }
}

impl Related<super::ports::Entity> for Entity {
    fn to() -> RelationDef {
        super::routerports::Relation::Ports.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::routerports::Relation::Routers.def().rev())
    }
}

impl Related<super::qos_policies::Entity> for Entity {
    fn to() -> RelationDef {
        super::qos_router_gw_policy_bindings::Relation::QosPolicies.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::qos_router_gw_policy_bindings::Relation::Routers
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
