//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "action")]
pub enum Action {
    #[sea_orm(string_value = "allow")]
    Allow,
    #[sea_orm(string_value = "deny")]
    Deny,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "auth_algorithm")]
pub enum AuthAlgorithm {
    #[sea_orm(string_value = "sha1")]
    Sha1,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "direction")]
pub enum Direction {
    #[sea_orm(string_value = "ingress")]
    Ingress,
    #[sea_orm(string_value = "egress")]
    Egress,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "dpd_action")]
pub enum DpdAction {
    #[sea_orm(string_value = "hold")]
    Hold,
    #[sea_orm(string_value = "clear")]
    Clear,
    #[sea_orm(string_value = "restart")]
    Restart,
    #[sea_orm(string_value = "disabled")]
    Disabled,
    #[sea_orm(string_value = "restart-by-peer")]
    RestartByPeer,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "encapsulation_mode")]
pub enum EncapsulationMode {
    #[sea_orm(string_value = "tunnel")]
    Tunnel,
    #[sea_orm(string_value = "transport")]
    Transport,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(
    rs_type = "String",
    db_type = "Enum",
    enum_name = "encryption_algorithm"
)]
pub enum EncryptionAlgorithm {
    #[sea_orm(string_value = "3des")]
    _3des,
    #[sea_orm(string_value = "aes-128")]
    Aes128,
    #[sea_orm(string_value = "aes-256")]
    Aes256,
    #[sea_orm(string_value = "aes-192")]
    Aes192,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "ike_version")]
pub enum IkeVersion {
    #[sea_orm(string_value = "v1")]
    V1,
    #[sea_orm(string_value = "v2")]
    V2,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "initiator")]
pub enum Initiator {
    #[sea_orm(string_value = "bi-directional")]
    BiDirectional,
    #[sea_orm(string_value = "response-only")]
    ResponseOnly,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "ipv6_address_mode")]
pub enum Ipv6AddressMode {
    #[sea_orm(string_value = "slaac")]
    Slaac,
    #[sea_orm(string_value = "dhcpv6-stateful")]
    Dhcpv6Stateful,
    #[sea_orm(string_value = "dhcpv6-stateless")]
    Dhcpv6Stateless,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "ipv6_ra_mode")]
pub enum Ipv6RaMode {
    #[sea_orm(string_value = "slaac")]
    Slaac,
    #[sea_orm(string_value = "dhcpv6-stateful")]
    Dhcpv6Stateful,
    #[sea_orm(string_value = "dhcpv6-stateless")]
    Dhcpv6Stateless,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "lb_method")]
pub enum LbMethod {
    #[sea_orm(string_value = "ROUND_ROBIN")]
    RoundRobin,
    #[sea_orm(string_value = "LEAST_CONNECTIONS")]
    LeastConnections,
    #[sea_orm(string_value = "SOURCE_IP")]
    SourceIp,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "lifetime_units")]
pub enum LifetimeUnits {
    #[sea_orm(string_value = "seconds")]
    Seconds,
    #[sea_orm(string_value = "kilobytes")]
    Kilobytes,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "network_type")]
pub enum NetworkType {
    #[sea_orm(string_value = "vlan")]
    Vlan,
    #[sea_orm(string_value = "vxlan")]
    Vxlan,
    #[sea_orm(string_value = "gre")]
    Gre,
    #[sea_orm(string_value = "geneve")]
    Geneve,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(
    rs_type = "String",
    db_type = "Enum",
    enum_name = "numa_affinity_policy"
)]
pub enum NumaAffinityPolicy {
    #[sea_orm(string_value = "required")]
    Required,
    #[sea_orm(string_value = "preferred")]
    Preferred,
    #[sea_orm(string_value = "legacy")]
    Legacy,
    #[sea_orm(string_value = "socket")]
    Socket,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "pfs")]
pub enum Pfs {
    #[sea_orm(string_value = "group2")]
    Group2,
    #[sea_orm(string_value = "group5")]
    Group5,
    #[sea_orm(string_value = "group14")]
    Group14,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(
    rs_type = "String",
    db_type = "Enum",
    enum_name = "phase1_negotiation_mode"
)]
pub enum Phase1NegotiationMode {
    #[sea_orm(string_value = "main")]
    Main,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "protocol")]
pub enum Protocol {
    #[sea_orm(string_value = "HTTP")]
    Http,
    #[sea_orm(string_value = "HTTPS")]
    Https,
    #[sea_orm(string_value = "TCP")]
    Tcp,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "state")]
pub enum State {
    #[sea_orm(string_value = "active")]
    Active,
    #[sea_orm(string_value = "standby")]
    Standby,
    #[sea_orm(string_value = "unknown")]
    Unknown,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "transform_protocol")]
pub enum TransformProtocol {
    #[sea_orm(string_value = "esp")]
    Esp,
    #[sea_orm(string_value = "ah")]
    Ah,
    #[sea_orm(string_value = "ah-esp")]
    AhEsp,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "type")]
pub enum Type {
    #[sea_orm(string_value = "SOURCE_IP")]
    SourceIp,
    #[sea_orm(string_value = "HTTP_COOKIE")]
    HttpCookie,
    #[sea_orm(string_value = "APP_COOKIE")]
    AppCookie,
}
