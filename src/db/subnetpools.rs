//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "subnetpools")]
pub struct Model {
    pub project_id: Option<String>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: Option<String>,
    pub ip_version: i32,
    pub default_prefixlen: i32,
    pub min_prefixlen: i32,
    pub max_prefixlen: i32,
    pub shared: i8,
    pub default_quota: Option<i32>,
    pub hash: String,
    pub address_scope_id: Option<String>,
    pub is_default: i8,
    #[sea_orm(unique)]
    pub standard_attr_id: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::standardattributes::Entity",
        from = "Column::StandardAttrId",
        to = "super::standardattributes::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Standardattributes,
    #[sea_orm(has_many = "super::subnetpoolprefixes::Entity")]
    Subnetpoolprefixes,
    #[sea_orm(has_many = "super::subnetpoolrbacs::Entity")]
    Subnetpoolrbacs,
}

impl Related<super::standardattributes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Standardattributes.def()
    }
}

impl Related<super::subnetpoolprefixes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subnetpoolprefixes.def()
    }
}

impl Related<super::subnetpoolrbacs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subnetpoolrbacs.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
