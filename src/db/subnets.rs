//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use super::sea_orm_active_enums::Ipv6AddressMode;
use super::sea_orm_active_enums::Ipv6RaMode;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "subnets")]
pub struct Model {
    pub project_id: Option<String>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: Option<String>,
    pub network_id: String,
    pub ip_version: i32,
    pub cidr: String,
    pub gateway_ip: Option<String>,
    pub enable_dhcp: Option<i8>,
    pub ipv6_ra_mode: Option<Ipv6RaMode>,
    pub ipv6_address_mode: Option<Ipv6AddressMode>,
    pub subnetpool_id: Option<String>,
    #[sea_orm(unique)]
    pub standard_attr_id: i64,
    pub segment_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::dnsnameservers::Entity")]
    Dnsnameservers,
    #[sea_orm(has_many = "super::ipallocationpools::Entity")]
    Ipallocationpools,
    #[sea_orm(has_many = "super::ipallocations::Entity")]
    Ipallocations,
    #[sea_orm(
        belongs_to = "super::networks::Entity",
        from = "Column::NetworkId",
        to = "super::networks::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Networks,
    #[sea_orm(
        belongs_to = "super::networksegments::Entity",
        from = "Column::SegmentId",
        to = "super::networksegments::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Networksegments,
    #[sea_orm(
        belongs_to = "super::standardattributes::Entity",
        from = "Column::StandardAttrId",
        to = "super::standardattributes::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Standardattributes,
    #[sea_orm(has_one = "super::subnet_dns_publish_fixed_ips::Entity")]
    SubnetDnsPublishFixedIps,
    #[sea_orm(has_many = "super::subnet_service_types::Entity")]
    SubnetServiceTypes,
    #[sea_orm(has_many = "super::subnetroutes::Entity")]
    Subnetroutes,
    #[sea_orm(has_many = "super::vpnservices::Entity")]
    Vpnservices,
}

impl Related<super::dnsnameservers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Dnsnameservers.def()
    }
}

impl Related<super::ipallocationpools::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ipallocationpools.def()
    }
}

impl Related<super::ipallocations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ipallocations.def()
    }
}

impl Related<super::networks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Networks.def()
    }
}

impl Related<super::networksegments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Networksegments.def()
    }
}

impl Related<super::standardattributes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Standardattributes.def()
    }
}

impl Related<super::subnet_dns_publish_fixed_ips::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubnetDnsPublishFixedIps.def()
    }
}

impl Related<super::subnet_service_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubnetServiceTypes.def()
    }
}

impl Related<super::subnetroutes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subnetroutes.def()
    }
}

impl Related<super::vpnservices::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Vpnservices.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
