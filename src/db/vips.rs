//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use super::sea_orm_active_enums::Protocol;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "vips")]
pub struct Model {
    pub tenant_id: Option<String>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub status: String,
    pub status_description: Option<String>,
    pub name: Option<String>,
    pub description: Option<String>,
    pub port_id: Option<String>,
    pub protocol_port: i32,
    pub protocol: Protocol,
    #[sea_orm(unique)]
    pub pool_id: String,
    pub admin_state_up: i8,
    pub connection_limit: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::pools::Entity")]
    Pools,
    #[sea_orm(
        belongs_to = "super::ports::Entity",
        from = "Column::PortId",
        to = "super::ports::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Ports,
    #[sea_orm(has_one = "super::sessionpersistences::Entity")]
    Sessionpersistences,
}

impl Related<super::pools::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Pools.def()
    }
}

impl Related<super::ports::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ports.def()
    }
}

impl Related<super::sessionpersistences::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sessionpersistences.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
