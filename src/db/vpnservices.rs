//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "vpnservices")]
pub struct Model {
    pub tenant_id: Option<String>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: Option<String>,
    pub description: Option<String>,
    pub status: String,
    pub admin_state_up: i8,
    pub subnet_id: String,
    pub router_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::ipsec_site_connections::Entity")]
    IpsecSiteConnections,
    #[sea_orm(
        belongs_to = "super::routers::Entity",
        from = "Column::RouterId",
        to = "super::routers::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Routers,
    #[sea_orm(
        belongs_to = "super::subnets::Entity",
        from = "Column::SubnetId",
        to = "super::subnets::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Subnets,
}

impl Related<super::ipsec_site_connections::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IpsecSiteConnections.def()
    }
}

impl Related<super::routers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Routers.def()
    }
}

impl Related<super::subnets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subnets.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
